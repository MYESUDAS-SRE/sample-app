name: CI/CD Sample App

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Build WAR
        run: mvn clean package -DskipTests

      # --- jboss1 Deployment ---
      - name: Copy WAR to jboss1
        uses: appleboy/scp-action@v1.0.0 # Verified or updated version
        with:
          host: ${{ secrets.JBOSS1 }}
          username: ec2-user
          key: ${{ secrets.EC2_KEY }}
          source: "target/sample-app.war"
          target: "/tmp/"

      - name: Deploy WAR on jboss1
        uses: appleboy/ssh-action@v1.0.0 # Use the same verified or updated version
        with:
          host: ${{ secrets.JBOSS1 }}
          username: ec2-user
          key: ${{ secrets.EC2_KEY }}
          script: |
            # Check if WildFly is running, start if not (run as wildfly user)
            if ! pgrep -f "wildfly" > /dev/null; then
              echo "WildFly not running on JBOSS1, starting..."
              # Ensure the 'wildfly' user exists and has necessary permissions
              # The 'sudo -u wildfly' command assumes ec2-user has sudo privileges for wildfly
              sudo -u wildfly nohup /opt/wildfly/bin/standalone.sh \
                -b 0.0.0.0 \
                -bmanagement 0.0.0.0 \
                -Djboss.bind.address.management=0.0.0.0 \
                > /opt/wildfly/standalone/log/server.log 2>&1 &
              sleep 20 # Give WildFly some time to start
            fi
            
            # Deploy the WAR file using jboss-cli as the wildfly user
            sudo -u wildfly /opt/wildfly/bin/jboss-cli.sh \
              --connect \
              --controller=127.0.0.1:9990 \
              --user=${{ secrets.WILDFLY_USER }} \
              --password=${{ secrets.WILDFLY_PASS }} \
              --command="deploy /tmp/sample-app.war --force"
            
            # Health check
            curl -f http://localhost:8080/sample-app/ || exit 1

      # --- jboss2 Deployment ---
      - name: Copy WAR to jboss2
        uses: appleboy/scp-action@v1.0.0 # Verified or updated version
        with:
          host: ${{ secrets.JBOSS2 }}
          username: ec2-user
          key: ${{ secrets.EC2_KEY }}
          source: "target/sample-app.war"
          target: "/tmp/"

      - name: Deploy WAR on jboss2
        uses: appleboy/ssh-action@v1.0.0 # Use the same verified or updated version
        with:
          host: ${{ secrets.JBOSS2 }}
          username: ec2-user
          key: ${{ secrets.EC2_KEY }}
          script: |
            # Check if WildFly is running, start if not (run as wildfly user)
            if ! pgrep -f "wildfly" > /dev/null; then
              echo "WildFly not running on JBOSS2, starting..."
              sudo -u wildfly nohup /opt/wildfly/bin/standalone.sh \
                -b 0.0.0.0 \
                -bmanagement 0.0.0.0 \
                -Djboss.bind.address.management=0.0.0.0 \
                > /opt/wildfly/standalone/log/server.log 2>&1 &
              sleep 20 # Give WildFly some time to start
            fi
            
            # Deploy the WAR file using jboss-cli as the wildfly user
            sudo -u wildfly /opt/wildfly/bin/jboss-cli.sh \
              --connect \
              --controller=127.0.0.1:9990 \
              --user=${{ secrets.WILDFLY_USER }} \
              --password=${{ secrets.WILDFLY_PASS }} \
              --command="deploy /tmp/sample-app.war --force"
            
            # Health check
            curl -f http://localhost:8080/sample-app/ || exit 1