name: CI/CD to WildFly Cluster

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout reponame: CI/CD to WildFly Cluster

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repo
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Setup JDK 17
      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      # Step 3: Build WAR
      - name: Build WAR
        run: mvn clean package -DskipTests

      # Step 4: Copy WAR to JBOSS1
      - name: Copy WAR to JBOSS1
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.JBOSS1 }}
          username: ec2-user
          key: ${{ secrets.EC2_KEY }}
          source: target/sample-app.war
          target: /tmp/   # ✅ FIXED (directory, not file)

      # Step 5: Copy WAR to JBOSS2
      - name: Copy WAR to JBOSS2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.JBOSS2 }}
          username: ec2-user
          key: ${{ secrets.EC2_KEY }}
          source: target/sample-app.war
          target: /tmp/   # ✅ FIXED

      # Step 6: Deploy to JBOSS1
      - name: Deploy on JBOSS1
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.JBOSS1 }}
          username: ec2-user
          key: ${{ secrets.EC2_KEY }}
          script: |
            sudo -u wildfly bash <<'EOF'
            if ! pgrep -u wildfly -f "wildfly" > /dev/null; then
              echo "Starting WildFly..."
              nohup /opt/wildfly/bin/standalone.sh -b 0.0.0.0 -bmanagement 0.0.0.0 \
                > /opt/wildfly/wildfly.log 2>&1 &
              sleep 20
            fi

            echo "Cleaning old deployments..."
            rm -f /opt/wildfly/standalone/deployments/sample-app.war*

            echo "Copying new WAR..."
            cp /tmp/sample-app.war /opt/wildfly/standalone/deployments/

            echo "Deploying via CLI..."
            /opt/wildfly/bin/jboss-cli.sh \
              --connect \
              --controller=127.0.0.1:9990 \
              --user=${WILDFLY_USER} \
              --password=${WILDFLY_PASS} \
              --command="deploy /opt/wildfly/standalone/deployments/sample-app.war --force"

            echo "Verifying deployment..."
            /opt/wildfly/bin/jboss-cli.sh --connect --command="deployment-info"
            EOF

      # Step 7: Deploy to JBOSS2
      - name: Deploy on JBOSS2
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.JBOSS2 }}
          username: ec2-user
          key: ${{ secrets.EC2_KEY }}
          script: |
            sudo -u wildfly bash <<'EOF'
            if ! pgrep -u wildfly -f "wildfly" > /dev/null; then
              echo "Starting WildFly..."
              nohup /opt/wildfly/bin/standalone.sh -b 0.0.0.0 -bmanagement 0.0.0.0 \
                > /opt/wildfly/wildfly.log 2>&1 &
              sleep 20
            fi

            echo "Cleaning old deployments..."
            rm -f /opt/wildfly/standalone/deployments/sample-app.war*

            echo "Copying new WAR..."
            cp /tmp/sample-app.war /opt/wildfly/standalone/deployments/

            echo "Deploying via CLI..."
            /opt/wildfly/bin/jboss-cli.sh \
              --connect \
              --controller=127.0.0.1:9990 \
              --user=${WILDFLY_USER} \
              --password=${WILDFLY_PASS} \
              --command="deploy /opt/wildfly/standalone/deployments/sample-app.war --force"

            echo "Verifying deployment..."
            /opt/wildfly/bin/jboss-cli.sh --connect --command="deployment-info"
            EOF

      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Setup JDK 17
      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      # Step 3: Build WAR
      - name: Build WAR
        run: mvn clean package -DskipTests

      # Step 4: Copy WAR to JBOSS1
      - name: Copy WAR to JBOSS1
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.JBOSS1 }}
          username: ec2-user
          key: ${{ secrets.EC2_KEY }}
          source: target/sample-app.war
          target: /tmp/

      # Step 5: Copy WAR to JBOSS2
      - name: Copy WAR to JBOSS2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.JBOSS2 }}
          username: ec2-user
          key: ${{ secrets.EC2_KEY }}
          source: target/sample-app.war
          target: /tmp/

      # Step 6: Deploy to JBOSS1
      - name: Deploy on JBOSS1
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.JBOSS1 }}
          username: ec2-user
          key: ${{ secrets.EC2_KEY }}
          script: |
            if ! pgrep -f "org.jboss.as.standalone" > /dev/null; then
              echo "Starting WildFly..."
              nohup sudo /opt/wildfly/bin/standalone.sh -b 0.0.0.0 -bmanagement 0.0.0.0 \
                > /opt/wildfly/wildfly.log 2>&1 &
              sleep 20
            fi

            echo "Cleaning old deployments..."
            sudo rm -f /opt/wildfly/standalone/deployments/sample-app.war*

            echo "Copying new WAR..."
            sudo cp /tmp/sample-app.war /opt/wildfly/standalone/deployments/

            echo "Deploying via CLI..."
            sudo /opt/wildfly/bin/jboss-cli.sh \
              --connect \
              --controller=127.0.0.1:9990 \
              --user=${{ secrets.WILDFLY_USER }} \
              --password=${{ secrets.WILDFLY_PASS }} \
              --command="deploy /opt/wildfly/standalone/deployments/sample-app.war --force"

            echo "Verifying deployment..."
            sudo /opt/wildfly/bin/jboss-cli.sh --connect \
              --user=${{ secrets.WILDFLY_USER }} \
              --password=${{ secrets.WILDFLY_PASS }} \
              --command="deployment-info"

      # Step 7: Deploy to JBOSS2
      - name: Deploy on JBOSS2
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.JBOSS2 }}
          username: ec2-user
          key: ${{ secrets.EC2_KEY }}
          script: |
            if ! pgrep -f "org.jboss.as.standalone" > /dev/null; then
              echo "Starting WildFly..."
              nohup sudo /opt/wildfly/bin/standalone.sh -b 0.0.0.0 -bmanagement 0.0.0.0 \
                > /opt/wildfly/wildfly.log 2>&1 &
              sleep 20
            fi

            echo "Cleaning old deployments..."
            sudo rm -f /opt/wildfly/standalone/deployments/sample-app.war*

            echo "Copying new WAR..."
            sudo cp /tmp/sample-app.war /opt/wildfly/standalone/deployments/

            echo "Deploying via CLI..."
            sudo /opt/wildfly/bin/jboss-cli.sh \
              --connect \
              --controller=127.0.0.1:9990 \
              --user=${{ secrets.WILDFLY_USER }} \
              --password=${{ secrets.WILDFLY_PASS }} \
              --command="deploy /opt/wildfly/standalone/deployments/sample-app.war --force"

            echo "Verifying deployment..."
            sudo /opt/wildfly/bin/jboss-cli.sh --connect \
              --user=${{ secrets.WILDFLY_USER }} \
              --password=${{ secrets.WILDFLY_PASS }} \
              --command="deployment-info"
